b'Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the  MagicDictionary  class:\n\nMagicDictionary()  Initializes the object.\nvoid buildDict(String[]  dictionary)  Sets the data structure  with an array of distinct strings dictionary.\nbool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\n\n  \nExample 1:\nInput\n["MagicDictionary", "buildDict", "search", "search", "search", "search"]\n[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict(["hello", "leetcode"]);\nmagicDictionary.search("hello"); // return False\nmagicDictionary.search("hhllo"); // We can change the second \'h\' to \'e\' to match "hello" so we return True\nmagicDictionary.search("hell"); // return False\nmagicDictionary.search("leetcoded"); // return False\n\n  \nConstraints:\n\n1 <=  dictionary.length <= 100\n1 <=  dictionary[i].length <= 100\ndictionary[i] consists of only lower-case English letters.\nAll the strings in  dictionary  are distinct.\n1 <=  searchWord.length <= 100\nsearchWord  consists of only lower-case English letters.\nbuildDict  will be called only once before search.\nAt most 100 calls will be made to search.\n\n'